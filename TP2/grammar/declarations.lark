// Declarations

declaration: atomic_declaration ";"
           | set_declaration ";"
           | list_declaration ";"
           | tuple_declaration ";"
           | dict_declaration ";"

atomic_declaration: TYPE var             -> atomic_declaration
                  | TYPE var "=" operand -> atomic_declaration_init

set_declaration: TYPE "set" var          -> set_declaration
               | TYPE "set" var "=" set  -> set_declaration_init

list_declaration: TYPE "list" var           -> list_declaration
                | TYPE "list" var "=" list  -> list_declaration_init

tuple_declaration: TYPE "tuple" var           -> tuple_declaration
                 | TYPE "tuple" var "=" tuple -> tuple_declaration_init

dict_declaration: "(" TYPE "," TYPE ")" "dict" var           -> dict_declaration
                | "(" TYPE "," TYPE ")" "dict" var "=" dict  -> dict_declaration_init

var: WORD

TYPE: "int"  
    | "float"
    | "str"  
    | "bool"  

set: "{" list_contents "}"
list: "[" list_contents "]"
tuple: "(" list_contents ")"
dict: "{" dict_contents "}"

list_contents: int_contents    -> list_contents_int
             | float_contents  -> list_contents_float
             | string_contents -> list_contents_str
             | bool_contents   -> list_contents_bool

int_contents: INT ("," INT)*
float_contents: FLOAT ("," FLOAT)*
string_contents: ESCAPED_STRING ("," ESCAPED_STRING)*
bool_contents: BOOL ("," BOOL)*

dict_contents: value ":" value ("," value ":" value)*

operand: value | var

value: ESCAPED_STRING   -> value_string
     | FLOAT            -> value_float
     | INT              -> value_int
     | BOOL             -> value_bool

BOOL: "True"
    | "False"

%import common.WS
%import common.NEWLINE
%ignore WS
%ignore NEWLINE
%import common.INT
%import common.WORD
%import common.FLOAT
%import common.ESCAPED_STRING